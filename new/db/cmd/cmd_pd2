NAME=bytes for invalid insn (#11434)
FILE=-
CMDS=<<EXPECT
e asm.arch=x86
e asm.bits=64
wx 60; pd 2
?e
wx 906090; pd 3
EXPECT=<<RUN
            0x00000000      60             invalid
            0x00000001      0000           add byte [rax], al

            0x00000000      90             nop
            0x00000001      60             invalid
            0x00000002      90             nop
RUN

NAME=arm indirect relsub fix (#11780)
FILE=../bins/elf/analysis/arm_32_flags0
CMDS=<<EXPECT
e asm.bytes=false
e asm.cmt.right=true
pd 1 @ 0x000102e0
pd 1 @ 0x000102e8
?e
e asm.cmt.right=false
pd 1 @ 0x000102e0
pd 1 @ 0x000102e8
EXPECT=<<RUN
            0x000102e0      ldr ip, sym.__libc_csu_fini                ; [loc._d_2:4]=0x10494 sym.__libc_csu_fini
            0x000102e8      ldr r0, sym.main                           ; [0x102fc:4]=0x10408 sym.main

            ; [loc._d_2:4]=0x10494 sym.__libc_csu_fini
            0x000102e0      ldr ip, sym.__libc_csu_fini
            ; [0x102fc:4]=0x10408 sym.main
            0x000102e8      ldr r0, sym.main
RUN

NAME=realign after sparse (#11810)
FILE=../bins/pe/cmd_adf_sample0.exe
CMDS=<<EXPECT
e asm.bytes=false
e asm.comments=false
s 0x560e67
af
pdf
EXPECT=<<RUN
/ (fcn) fcn.00560e67 6412
|   fcn.00560e67 ();
|     ::    ; var int local_4h @ esp+0x4
|     ::    ; var int local_8h @ esp+0x8
|     ::    ; var int local_10h @ esp+0x10
|     ::    ; var int local_24h @ esp+0x24
|     ::    ; var int local_28h @ esp+0x28
|     ::    0x00560e67      push esi
|    ,====< 0x00560e68      jmp 0x560e7d
..
|    `----> 0x00560e7d      pop esi
|     ::    0x00560e7e      push eax
|     ::    0x00560e7f      push edx
|    ,====< 0x00560e80      jmp 0x560e96
..
|   |`----> 0x00560e96      rdtsc
|   | ::    0x00560e98      jmp 0x560eb1
..
|   ||::    0x00560eb1      pop edx
|   ||::    0x00560eb2      pop eax
|   ||::    0x00560eb3      pushfd
|   ||::    0x00560eb4      push eax
|   ||::    0x00560eb5      mov dword [esp], ecx
|   ||::    0x00560eb8      push ecx
|   ||::    0x00560eb9      mov dword [esp], 0x4b7dbaf4
|   ||::    0x00560ec0      mov dword [esp], ebx
|   ||::    0x00560ec3      mov ebx, 0x60
|   ||::    0x00560ec8      mov dword [local_4h], ebx
|   ||::    0x00560ecc      pop ebx
|   ||::    0x00560ecd      push ecx
|   ||::    0x00560ece      mov dword [esp], 0x7fdd7312
|   ||::    0x00560ed5      or dword [esp], 0x76fe6216
|    |::    0x00560edc      shl dword [esp], 1
|    |::    0x00560ee0      or dword [esp], 0x5677e157
|    |::    0x00560ee7      sub dword [esp], 0x66a97007
|    |::    0x00560eee      add dword [esp], 0xd4a8fad4
|    |::    0x00560ef5      xchg dword [esp], ebp
|    |::    0x00560ef8      not ebp
|    |::    0x00560efa      xchg dword [esp], ebp
|    |::    0x00560efd      inc dword [esp]
|    |::    0x00560f00      sub dword [esp], 0x91ea8610
|    |::    0x00560f07      push ebp
|    |::    0x00560f08      mov ebp, esp
|    |::    0x00560f0a      add ebp, 4
|    |::    0x00560f10      sub ebp, 4
|    |::    0x00560f16      xchg dword [esp], ebp
|    |::    0x00560f19      pop esp
|    |::    0x00560f1a      mov dword [esp], ecx
|    |::    0x00560f1d      mov dword [esp], eax
|    |::    0x00560f20      push 0x5a9b4939
|    |::    0x00560f25      mov dword [esp], ecx
|    |::    0x00560f28      mov ecx, esp
|     ::    0x00560f2a      push ebx
|     ::    0x00560f2b      mov ebx, 4
|     ::    0x00560f30      add ecx, ebx
|     ::    0x00560f32      pop ebx
|     ::    0x00560f33      sub ecx, 4
|     ::    0x00560f36      xor ecx, dword [esp]
|     ::    0x00560f39      xor dword [esp], ecx
|     ::    0x00560f3c      xor ecx, dword [esp]
|     ::    0x00560f3f      pop esp
|     ::    0x00560f40      mov dword [esp], ebx
|     ::    0x00560f43      push dword [local_10h]
|     ::    0x00560f47      mov eax, dword [esp]
|     ::    0x00560f4a      push esi
|     ::    0x00560f4b      mov esi, esp
|     ::    0x00560f4d      push edx
|     ::    0x00560f4e      mov edx, 0x75ff55bb
|     ::    0x00560f53      and edx, 0x7e5d8b17
|     ::    0x00560f59      xor edx, 0x745d0117
|     ::    0x00560f5f      add esi, edx
|     ::    0x00560f61      mov edx, dword [esp]
|     ::    0x00560f64      add esp, 4
|     ::    0x00560f67      add esi, 4
|     ::    0x00560f6d      xchg dword [esp], esi
|     ::    0x00560f70      pop esp
|     ::    0x00560f71      push dword [local_8h]
|     ::    0x00560f75      push dword [esp]
|     ::    0x00560f78      mov ebx, dword [esp]
|     ::    0x00560f7b      push ebx
|     ::    0x00560f7c      mov ebx, esp
|     ::    0x00560f7e      add ebx, 4
|     ::    0x00560f84      add ebx, 4
|     ::    0x00560f8a      xchg dword [esp], ebx
|     ::    0x00560f8d      pop esp
|     ::    0x00560f8e      add esp, 4
|     ::    0x00560f91      mov dword [local_8h], eax
|     ::    0x00560f95      mov dword [local_10h], ebx
|     ::    0x00560f99      push dword [esp]
|     ::    0x00560f9c      pop ebx
|     ::    0x00560f9d      push ebx
|     ::    0x00560f9e      mov ebx, esp
|     ::    0x00560fa0      add ebx, 4
|     ::    0x00560fa6      add ebx, 4
|     ::    0x00560fa9      push ebx
|     ::    0x00560faa      push dword [local_4h]
|     ::    0x00560fae      pop ebx
|     ::    0x00560faf      pop dword [esp]
|     ::    0x00560fb2      mov esp, dword [esp]
|     ::    0x00560fb5      mov eax, dword [esp]
|     ::    0x00560fb8      push ebx
|     ::    0x00560fb9      mov dword [esp], 0x1e8e43e4
|     ::    0x00560fc0      mov dword [esp], eax
|     ::    0x00560fc3      mov eax, esp
|     ::    0x00560fc5      add eax, 4
|     ::    0x00560fca      add eax, 4
|     ::    0x00560fcf      xchg dword [esp], eax
|     ::    0x00560fd2      mov esp, dword [esp]
\     :`==< 0x00560fd5      jmp 0x43d3f7
..
RUN

NAME=pdf hidden code in sparse fix
FILE=../bins/pe/cmd_adf_sample0.exe
CMDS=<<EXPECT
e asm.var=false
e io.cache=true
wx 90eb09 @ 0x560e71
wx e904000000 @ 0x560e68
wx e940c5edff @ 0x560eb2
s 0x560e67
af
pdf
?e
pdr.
EXPECT=<<RUN
/ (fcn) fcn.00560e67 6124
|    :::    0x00560e67      56             push esi
|   ,=====< 0x00560e68      e904000000     jmp 0x560e71
..
|   |:::    ; CODE XREF from fcn.00560e67 (0x560e68)
|   `-----> 0x00560e71      90             nop
|    :::    0x00560e72      eb09           jmp 0x560e7d
..
|    :::    ; CODE XREF from fcn.00560e67 (0x560e72)
|    :::    0x00560e7d      5e             pop esi
|    :::    0x00560e7e      50             push eax
|    :::    0x00560e7f      52             push edx
|   ,=====< 0x00560e80      e911000000     jmp 0x560e96
..
|  ||:::    ; CODE XREF from fcn.00560e67 (0x560e80)
|  |`-----> 0x00560e96      0f31           rdtsc
|  | :::    0x00560e98      e914000000     jmp 0x560eb1
..
|  ||:::    ; CODE XREF from fcn.00560e67 (0x560e98)
|  ||:::    0x00560eb1      5a             pop edx
\  ||:`===< 0x00560eb2      e940c5edff     jmp 0x43d3f7
..

/ (fcn) fcn.00560e67 6124
| 0x00560e67      56             push esi
| 0x00560e68      e904000000     jmp 0x560e71
| ----------- true: 0x00560e71
| ; CODE XREF from fcn.00560e67 (0x560e68)
| 0x00560e71      90             nop
| 0x00560e72      eb09           jmp 0x560e7d
| ----------- true: 0x00560e7d
| ; CODE XREF from fcn.00560e67 (0x560e72)
| 0x00560e7d      5e             pop esi
| 0x00560e7e      50             push eax
| 0x00560e7f      52             push edx
| 0x00560e80      e911000000     jmp 0x560e96
| ----------- true: 0x00560e96
| ; CODE XREF from fcn.00560e67 (0x560e80)
| 0x00560e96      0f31           rdtsc
| 0x00560e98      e914000000     jmp 0x560eb1
| ----------- true: 0x00560eb1
| ; CODE XREF from fcn.00560e67 (0x560e98)
| 0x00560eb1      5a             pop edx
\ 0x00560eb2      e940c5edff     jmp 0x43d3f7
| ----------- true: 0x0043d3f7
RUN

NAME=asm.bb.middle disasm
FILE=../bins/pe/cmd_adf_sample0.exe
CMDS=<<EXPECT
e asm.bytes=false
e asm.comments=false
e asm.var=false
s 0x560e67
af
e asm.bb.middle=true
pD 0x560eb3-$$
?e
e asm.bb.middle=false
pD 0x560eb3-$$
EXPECT=<<RUN
/ (fcn) fcn.00560e67 6412
|           0x00560e67      push esi
|       ,=< 0x00560e68      jmp 0x560e7d
        |   0x00560e6d      push ecx
        |   0x00560e6e      in eax, 0xd6
        |   0x00560e70      sbb eax, 0x5ceea31
        |   0x00560e75      push es
        |   0x00560e76      cmp edx, esp
        |   0x00560e78      aam 0x1b
        |   0x00560e7a  ~   add byte [ebp + 0x52505e96], al
|       `-> 0x00560e7d      pop esi
|           0x00560e7e      push eax
|           0x00560e7f      push edx
|       ,=< 0x00560e80      jmp 0x560e96
        |   0x00560e85      mov ebx, 0x4fd160dd
        |   0x00560e8a      in al, dx
        |   0x00560e8b      mov esp, 0x60bdf441
        |   0x00560e90      lodsd eax, dword [esi]
       ,==< 0x00560e91      ja 0x560ed9
       ||   0x00560e93      aaa
       ||   0x00560e94      sahf
       ||   0x00560e95  ~   mov edx, 0x14e9310f
|      |`-> 0x00560e96      rdtsc
|      |    0x00560e98      jmp 0x560eb1
       |    0x00560e9d      test al, 0x36
       |    0x00560e9f      fcom qword [edx + 0x64]
       |    0x00560ea2      xlatb
       |    0x00560ea3      push 0x27
       |    0x00560ea5      sub esp, edx
       |    0x00560ea7      mov eax, dword [0xe8c1cf5d]
       |,=< 0x00560eac      jle 0x560f29
       ||   0x00560eae      inc ecx
       ||   0x00560eaf  ~   mov byte [eax + 0x5a], dl
|      ||   0x00560eb1      pop edx
|      ||   0x00560eb2      pop eax

/ (fcn) fcn.00560e67 6412
|           0x00560e67      push esi
|       ,=< 0x00560e68      jmp 0x560e7d
        |   0x00560e6d      push ecx
        |   0x00560e6e      in eax, 0xd6
        |   0x00560e70      sbb eax, 0x5ceea31
        |   0x00560e75      push es
        |   0x00560e76      cmp edx, esp
        |   0x00560e78      aam 0x1b
        |   0x00560e7a      add byte [ebp + 0x52505e96], al
|       ,=< 0x00560e80      jmp 0x560e96
        |   0x00560e85      mov ebx, 0x4fd160dd
        |   0x00560e8a      in al, dx
        |   0x00560e8b      mov esp, 0x60bdf441
        |   0x00560e90      lodsd eax, dword [esi]
       ,==< 0x00560e91      ja 0x560ed9
       ||   0x00560e93      aaa
       ||   0x00560e94      sahf
       ||   0x00560e95      mov edx, 0x14e9310f
|      |    0x00560e9a      add byte [eax], al
|      |    0x00560e9c      add byte [eax + 0x6452dc36], ch
       |    0x00560ea2      xlatb
       |    0x00560ea3      push 0x27
       |    0x00560ea5      sub esp, edx
       |    0x00560ea7      mov eax, dword [0xe8c1cf5d]
       |,=< 0x00560eac      jle 0x560f29
       ||   0x00560eae      inc ecx
       ||   0x00560eaf      mov byte [eax + 0x5a], dl
|      ||   0x00560eb2      pop eax
RUN

NAME=asm.bb.middle json
FILE=-
CMDS=<<EXPECT
e anal.nopskip=false
e anal.jmpmid=true
e io.cache=true
wx 0f1f440000b8210000c1ebfdbb2c000000ebf0
af
?e
?e ----1----
?e
e asm.bb.middle=true
pDj 19~{}
?e
?e ----2----
?e
e asm.bb.middle=false
pDj 19~{}
?e
?e ----3----
?e
e asm.bb.middle=true
pdfj~{}
EXPECT=<<RUN

----1----

[
  {
    "offset": 0,
    "esil": ",",
    "refptr": false,
    "fcn_addr": 0,
    "fcn_last": 16,
    "size": 5,
    "opcode": "nop dword [rax + rax]",
    "disasm": "nop dword [rax + rax]",
    "bytes": "0f1f440000",
    "family": "cpu",
    "type": "nop",
    "type_num": 8,
    "type2_num": 0,
    "flags": [
      "fcn.00000000"
    ]
  },
  {
    "offset": 3,
    "val": 2,
    "esil": "al,rax,+=[1],$o,of,=,$s,sf,=,$z,zf,=,$c7,cf,=,$p,pf,=",
    "refptr": false,
    "fcn_addr": 0,
    "fcn_last": 17,
    "size": 2,
    "opcode": "add byte [rax], al",
    "disasm": "add byte [rax], al",
    "bytes": "0000",
    "family": "cpu",
    "type": "add",
    "type_num": 17,
    "type2_num": 0,
    "xrefs": [
      {
        "addr": 17,
        "type": "CODE"
      }
    ]
  },
  {
    "offset": 5,
    "ptr": 3238002721,
    "val": 3238002721,
    "esil": "3238002721,rax,=",
    "refptr": false,
    "fcn_addr": 0,
    "fcn_last": 15,
    "size": 5,
    "opcode": "mov eax, 0xc1000021",
    "disasm": "mov eax, 0xc1000021",
    "bytes": "b8210000c1",
    "family": "cpu",
    "type": "mov",
    "type_num": 9,
    "type2_num": 0
  },
  {
    "offset": 9,
    "val": 253,
    "esil": "$0,cf,=,1,253,-,1,<<,ebx,&,?{,$1,cf,=,},253,ebx,>>,ebx,=,$z,zf,=,$p,pf,=,$s,sf,=",
    "refptr": false,
    "fcn_addr": 0,
    "fcn_last": 16,
    "size": 3,
    "opcode": "shr ebx, 0xfd",
    "disasm": "shr ebx, 0xfd",
    "bytes": "c1ebfd",
    "family": "cpu",
    "type": "shr",
    "type_num": 22,
    "type2_num": 0,
    "xrefs": [
      {
        "addr": 10,
        "type": "CODE"
      }
    ]
  },
  {
    "offset": 12,
    "ptr": 44,
    "val": 44,
    "esil": "44,rbx,=",
    "refptr": false,
    "fcn_addr": 0,
    "fcn_last": 14,
    "size": 5,
    "opcode": "mov ebx, 0x2c",
    "disasm": "mov ebx, 0x2c",
    "bytes": "bb2c000000",
    "family": "cpu",
    "type": "mov",
    "type_num": 9,
    "type2_num": 0
  },
  {
    "offset": 17,
    "esil": "0x3,rip,=",
    "refptr": false,
    "fcn_addr": 0,
    "fcn_last": 17,
    "size": 2,
    "opcode": "jmp 3",
    "disasm": "jmp 3",
    "bytes": "ebf0",
    "family": "cpu",
    "type": "jmp",
    "type_num": 1,
    "type2_num": 0,
    "jump": 3
  }
]

----2----

[
  {
    "offset": 0,
    "esil": ",",
    "refptr": false,
    "fcn_addr": 0,
    "fcn_last": 14,
    "size": 5,
    "opcode": "nop dword [rax + rax]",
    "disasm": "nop dword [rax + rax]",
    "bytes": "0f1f440000",
    "family": "cpu",
    "type": "nop",
    "type_num": 8,
    "type2_num": 0,
    "flags": [
      "fcn.00000000"
    ]
  },
  {
    "offset": 5,
    "ptr": 3238002721,
    "val": 3238002721,
    "esil": "3238002721,rax,=",
    "refptr": false,
    "fcn_addr": 0,
    "fcn_last": 14,
    "size": 5,
    "opcode": "mov eax, 0xc1000021",
    "disasm": "mov eax, 0xc1000021",
    "bytes": "b8210000c1",
    "family": "cpu",
    "type": "mov",
    "type_num": 9,
    "type2_num": 0
  },
  {
    "offset": 10,
    "esil": "0x9,rip,=",
    "refptr": false,
    "fcn_addr": 0,
    "fcn_last": 17,
    "size": 2,
    "opcode": "jmp 9",
    "disasm": "jmp 9",
    "bytes": "ebfd",
    "family": "cpu",
    "type": "jmp",
    "type_num": 1,
    "type2_num": 0,
    "jump": 9
  },
  {
    "offset": 12,
    "ptr": 44,
    "val": 44,
    "esil": "44,rbx,=",
    "refptr": false,
    "fcn_addr": 0,
    "fcn_last": 14,
    "size": 5,
    "opcode": "mov ebx, 0x2c",
    "disasm": "mov ebx, 0x2c",
    "bytes": "bb2c000000",
    "family": "cpu",
    "type": "mov",
    "type_num": 9,
    "type2_num": 0
  },
  {
    "offset": 17,
    "esil": "0x3,rip,=",
    "refptr": false,
    "fcn_addr": 0,
    "fcn_last": 17,
    "size": 2,
    "opcode": "jmp 3",
    "disasm": "jmp 3",
    "bytes": "ebf0",
    "family": "cpu",
    "type": "jmp",
    "type_num": 1,
    "type2_num": 0,
    "jump": 3
  }
]

----3----

{
  "name": "fcn.00000000",
  "size": 24,
  "addr": 0,
  "ops": [
    {
      "offset": 0,
      "esil": ",",
      "refptr": false,
      "fcn_addr": 0,
      "fcn_last": 14,
      "size": 5,
      "opcode": "nop dword [rax + rax]",
      "disasm": "nop dword [rax + rax]",
      "bytes": "0f1f440000",
      "family": "cpu",
      "type": "nop",
      "type_num": 8,
      "type2_num": 0,
      "flags": [
        "fcn.00000000"
      ]
    },
    {
      "offset": 3,
      "val": 2,
      "esil": "al,rax,+=[1],$o,of,=,$s,sf,=,$z,zf,=,$c7,cf,=,$p,pf,=",
      "refptr": false,
      "fcn_addr": 0,
      "fcn_last": 17,
      "size": 2,
      "opcode": "add byte [rax], al",
      "disasm": "add byte [rax], al",
      "bytes": "0000",
      "family": "cpu",
      "type": "add",
      "type_num": 17,
      "type2_num": 0,
      "xrefs": [
        {
          "addr": 17,
          "type": "CODE"
        }
      ]
    },
    {
      "offset": 5,
      "ptr": 3238002721,
      "val": 3238002721,
      "esil": "3238002721,rax,=",
      "refptr": false,
      "fcn_addr": 0,
      "fcn_last": 14,
      "size": 5,
      "opcode": "mov eax, 0xc1000021",
      "disasm": "mov eax, 0xc1000021",
      "bytes": "b8210000c1",
      "family": "cpu",
      "type": "mov",
      "type_num": 9,
      "type2_num": 0
    },
    {
      "offset": 10,
      "esil": "0x9,rip,=",
      "refptr": false,
      "fcn_addr": 0,
      "fcn_last": 17,
      "size": 2,
      "opcode": "jmp 9",
      "disasm": "jmp 9",
      "bytes": "ebfd",
      "family": "cpu",
      "type": "jmp",
      "type_num": 1,
      "type2_num": 0,
      "jump": 9
    },
    {
      "offset": 9,
      "val": 253,
      "esil": "$0,cf,=,1,253,-,1,<<,ebx,&,?{,$1,cf,=,},253,ebx,>>,ebx,=,$z,zf,=,$p,pf,=,$s,sf,=",
      "refptr": false,
      "fcn_addr": 0,
      "fcn_last": 16,
      "size": 3,
      "opcode": "shr ebx, 0xfd",
      "disasm": "shr ebx, 0xfd",
      "bytes": "c1ebfd",
      "family": "cpu",
      "type": "shr",
      "type_num": 22,
      "type2_num": 0,
      "xrefs": [
        {
          "addr": 10,
          "type": "CODE"
        }
      ]
    },
    {
      "offset": 12,
      "ptr": 44,
      "val": 44,
      "esil": "44,rbx,=",
      "refptr": false,
      "fcn_addr": 0,
      "fcn_last": 14,
      "size": 5,
      "opcode": "mov ebx, 0x2c",
      "disasm": "mov ebx, 0x2c",
      "bytes": "bb2c000000",
      "family": "cpu",
      "type": "mov",
      "type_num": 9,
      "type2_num": 0
    },
    {
      "offset": 17,
      "esil": "0x3,rip,=",
      "refptr": false,
      "fcn_addr": 0,
      "fcn_last": 17,
      "size": 2,
      "opcode": "jmp 3",
      "disasm": "jmp 3",
      "bytes": "ebf0",
      "family": "cpu",
      "type": "jmp",
      "type_num": 1,
      "type2_num": 0,
      "jump": 3
    }
  ]
}
RUN

NAME=asm.bb.middle and pdi
FILE=-
CMDS=<<EXPECT
e anal.nopskip=false
e anal.jmpmid=true
e io.cache=true
wx 0f1f440000b8210000c1ebfdbb2c000000ebf0
af
e asm.bb.middle=true
pdi 6
?e
e asm.bb.middle=false
pdi 6
EXPECT=<<RUN
0x00000000    fcn.00000000:
0x00000000           0f1f440000  nop dword [rax + rax]
0x00000003                 0000  add byte [rax], al
0x00000005           b8210000c1  mov eax, 0xc1000021
0x00000009               c1ebfd  shr ebx, 0xfd
0x0000000c           bb2c000000  mov ebx, 0x2c
0x00000011                 ebf0  jmp 3

0x00000000    fcn.00000000:
0x00000000           0f1f440000  nop dword [rax + rax]
0x00000005           b8210000c1  mov eax, 0xc1000021
0x0000000a                 ebfd  jmp 9
0x0000000c           bb2c000000  mov ebx, 0x2c
0x00000011                 ebf0  jmp 3
0x00000013                 0000  add byte [rax], al
RUN

NAME=asm.bb.middle and asm.flags.middle
FILE=../bins/pe/cmd_adf_sample0.exe
CMDS=<<EXPECT
e asm.bytes=true
e asm.xrefs=false
s 0x560e67
af
e asm.bb.middle=true
e asm.flags.middle=2
f sym.dummy @ 0x560e7d
pd 2 @ 0x560e7a
?e
fm 0x560e7c @ sym.dummy
pd 3 @ 0x560e7a
?e
fm 0x560e96 @ sym.dummy
pd 2 @ 0x560e95
?e
fm 0x560e97 @ sym.dummy
pd 3 @ 0x560e95
EXPECT=<<RUN
            0x00560e7a  ~   0085965e5052   add byte [ebp + 0x52505e96], al
|           ;-- sym.dummy:
|           0x00560e7d      5e             pop esi

            0x00560e7a  ~   0085965e5052   add byte [ebp + 0x52505e96], al
            ;-- sym.dummy:
            0x00560e7c      96             xchg eax, esi
|           0x00560e7d      5e             pop esi

            0x00560e95  ~   ba0f31e914     mov edx, 0x14e9310f
|           ;-- sym.dummy:
|           0x00560e96      0f31           rdtsc

            0x00560e95  ~   ba0f31e914     mov edx, 0x14e9310f
|           0x00560e96  ~   0f31           rdtsc
|           ;-- sym.dummy:
|           0x00560e97      31e9           xor ecx, ebp
RUN

NAME=esil func cmts
FILE=../bins/elf/arm1.bin
CMDS=<<EXPECT
tk func.__libc_start_main.noreturn=false
e asm.emu=true
e emu.write=true
s 0x8174
af
# TODO:
#   e asm.cmt.right=true
#   pdf
#   ?e
e asm.cmt.right=false
pdf
?e
agf
EXPECT=<<RUN
/ (fcn) fcn.00008174 8
|   fcn.00008174 ();
|              ; lr=0x8178 -> 0xeb0002a4
|              ; pc=0x845c -> 0xe92d41f0 sym.__libc_start_main
|              ; int __libc_start_main(func: unk_size_format, int argc : 0x00000000 = 4294967295, char **: unk_size_format, func: unk_size_format, func: unk_size_format, func: unk_size_format, void * stack_end : (*0xffffffff)0x00000000 = 0xffffffff)
|           0x00008174      b80000eb       bl sym.__libc_start_main
|              ; lr=0x817c -> 0xe92d4030 loc._d_2
|              ; pc=0x8c10 -> 0xe59f62a0 sym.abort
|              ; void abort(void)
\           0x00008178      a40200eb       bl sym.abort

[0x00008174]> VV @ fcn.00008174 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y mov-speed:5
.------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------.
|  0x8174                                                                                                                                                                                                                                        |
| (fcn) fcn.00008174 8                                                                                                                                                                                                                           |
|   fcn.00008174 ();                                                                                                                                                                                                                             |
|    ; lr=0x8178 -> 0xeb0002a4                                                                                                                                                                                                                   |
|    ; pc=0x845c -> 0xe92d41f0 sym.__libc_start_main                                                                                                                                                                                             |
|    ; int __libc_start_main(func: unk_size_format, int argc : 0x00000000 = 4294967295, char **: unk_size_format, func: unk_size_format, func: unk_size_format, func: unk_size_format, void * stack_end : (*0xffffffff)0x00000000 = 0xffffffff)  |
| bl sym.__libc_start_main;[ga]                                                                                                                                                                                                                  |
|    ; lr=0x817c -> 0xe92d4030 loc._d_2                                                                                                                                                                                                          |
|    ; pc=0x8c10 -> 0xe59f62a0 sym.abort                                                                                                                                                                                                         |
|    ; void abort(void)                                                                                                                                                                                                                          |
| bl sym.abort;[gb]                                                                                                                                                                                                                              |
`------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
RUN
